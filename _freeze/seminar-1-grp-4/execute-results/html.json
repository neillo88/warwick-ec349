{
  "hash": "3f5716064e6487956a3634b8b2a81b92",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Group 1: Seminar 1\"\nformat: html\n---\n\n\n\nHere is the material from today's seminar. \n\n## R Script\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```{.sourceCode .r}\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx <- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny <- sqrt(x) #This DOES create a new stored value\n\npishort <- round(pi, 4)\n\nz <- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv <- seq(1,10)\nv\nv2 <- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw <- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 <- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW <- matrix(w) \nprint(W)\nt(W)\n\nW2 <- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums <- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 <- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 <- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed <- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx <- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx<-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx <- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz <- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck <- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list <- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame <- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=<DATA>) + <GEOM FUNCTION>(mapping=aes(<MAPPINGS>))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -> IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ<5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv <- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv <- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv <- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv <- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats <- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %>% \n\ndrv_stats2 <- car_frame %>% \n  filter(class==\"suv\") %>%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %>%\n  group_by(drv) %>%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  ) \n```\n\n\n:::\n:::\n\n\n\n## R Markdown\n\nLink to published published markdown: [html](group-material/grp-1/seminar-1.html).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n````{.sourceCode .r}\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame <- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\"\n````\n\n\n:::\n:::",
    "supporting": [
      "seminar-1-grp-4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}