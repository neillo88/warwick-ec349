{
  "hash": "333f5d1186e7a5495012f7692e980e98",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Seminar 1\"\nformat: html\n---\n\n\n\n\n## Overview\n\nThe goal for this seminar is to:\n\n- ensure everyone has successfully installed R and RStudio;\n- review some R basics;\n- review `tidyverse` packages\n  - `ggplot`\n  - `dplyr`\n- create and publish a RMarkdown file;\n- introduction to GitHub.\n\n## Installing R and RStudio\n\nFollow instructions outlined at <https://posit.co/download/rstudio-desktop/>.\n\nMore advanced users may wish to investigate [Positron](https://positron.posit.co/), a new IDE for R from the creators of RStudio. \n\n## R basics\n\n## 'Tidy' data with `tidyverse`\n\n`tidyverse` is a package designed for data scientists to create and analyse \"tidy data\" (see [description](https://tidyr.tidyverse.org/) from source). If you have analysed cross-sectional, longitudinal, or time-series data in Stata/R, then you are likely used to 'tidy' data. However, not all data is 'tidy'. For example, when you scrape data from a website it has a complex structure with many levels (often using a list structure in R). \n\n'Tidy' data essentially has a matrix structure (sometimes referred to as \"rectangular\" data) where a row represents a unique observation, a column a unique variable, and a cell a unique value. \n\n## RMarkdown\n\n[Markdown](https://www.markdownguide.org/) is a markup language. It includes relatively simple formatting that can incorporate more \"creative\" features through embedded HTML and CSS elements. \n\nWhen programming in R using a `.R`-script file, by default, text is treated as code. If you want to leave a comment, you need to comment-out the line using `#`. Markdown files flip this around: by default, any text is treated as plain text. Executable code must be placed within a code block for it to be executed. These blocks are then executed as a sequence of \"chunks\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(4,5,7,9)\n```\n:::\n\n\n\n\nMarkdown files have a number of useful features; including, \n\n1. intuitive combination of code and text;\n2. straight forward embedding of grpahs;\n3. publication in a number of formats (including, html, pdf, docx);\n4. inclusion of LaTeX. \n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub. Git is a tool used to manage code, designed to deal with version control. GitHub is an online repository. \n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\"\n\nWhen using GitHub for a solo project, these are the commands I typically execute in the **RStudio terminal** when I've completed working on a section:\n\n- `git status`\n- `git add .`\n- `git commit -m \"what I did\"`\n- `git push origin master`\n\nWhen working in a team, you want to ensure that you first \"pull\" any changes before editing files. This avoids clashes that can be a pain to disentangle. Before editing:\n\n- `git fetch` - this will fetch the data from the online repo\n- `git status` - this will show whether you have any local changes\n\nIf you have any changes:\n\n- `git add .`\n- `git commit -m \"what I did\"`\n\nIf you don't have any changes:\n\n- `git pull origin master`\n\nAfter edits are complete, check again for changes. In my experience, using GitHub does NOT AT ALL negate the need to communicate between team members. If you want to avoid issues with merging, you need be clear about who is working on what when. \n\n",
    "supporting": [
      "seminar-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}