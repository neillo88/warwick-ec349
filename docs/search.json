[
  {
    "objectID": "seminar-1.html",
    "href": "seminar-1.html",
    "title": "Seminar 1",
    "section": "",
    "text": "The goal for this seminar is to:\n\nensure everyone has successfully installed R and RStudio;\nreview some R basics;\nreview tidyverse packages\n\nggplot\ndplyr\n\ncreate and publish a RMarkdown file;\nintroduction to GitHub."
  },
  {
    "objectID": "seminar-1.html#overview",
    "href": "seminar-1.html#overview",
    "title": "Seminar 1",
    "section": "",
    "text": "The goal for this seminar is to:\n\nensure everyone has successfully installed R and RStudio;\nreview some R basics;\nreview tidyverse packages\n\nggplot\ndplyr\n\ncreate and publish a RMarkdown file;\nintroduction to GitHub."
  },
  {
    "objectID": "seminar-1.html#installing-r-and-rstudio",
    "href": "seminar-1.html#installing-r-and-rstudio",
    "title": "Seminar 1",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\nFollow instructions outlined at https://posit.co/download/rstudio-desktop/.\nMore advanced users may wish to investigate Positron, a new IDE for R from the creators of RStudio."
  },
  {
    "objectID": "seminar-1.html#r-basics",
    "href": "seminar-1.html#r-basics",
    "title": "Seminar 1",
    "section": "R basics",
    "text": "R basics"
  },
  {
    "objectID": "seminar-1.html#tidy-data-with-tidyverse",
    "href": "seminar-1.html#tidy-data-with-tidyverse",
    "title": "Seminar 1",
    "section": "‘Tidy’ data with tidyverse",
    "text": "‘Tidy’ data with tidyverse\ntidyverse is a package designed for data scientists to create and analyse “tidy data” (see description from source). If you have analysed cross-sectional, longitudinal, or time-series data in Stata/R, then you are likely used to ‘tidy’ data. However, not all data is ‘tidy’. For example, when you scrape data from a website it has a complex structure with many levels (often using a list structure in R).\n‘Tidy’ data essentially has a matrix structure (sometimes referred to as “rectangular” data) where a row represents a unique observation, a column a unique variable, and a cell a unique value."
  },
  {
    "objectID": "seminar-1.html#rmarkdown",
    "href": "seminar-1.html#rmarkdown",
    "title": "Seminar 1",
    "section": "RMarkdown",
    "text": "RMarkdown\nMarkdown is a markup language. It includes relatively simple formatting that can incorporate more “creative” features through embedded HTML and CSS elements.\nWhen programming in R using a .R-script file, by default, text is treated as code. If you want to leave a comment, you need to comment-out the line using #. Markdown files flip this around: by default, any text is treated as plain text. Executable code must be placed within a code block for it to be executed. These blocks are then executed as a sequence of “chunks”.\n\nx &lt;- c(4,5,7,9)\n\nMarkdown files have a number of useful features; including,\n\nintuitive combination of code and text;\nstraight forward embedding of grpahs;\npublication in a number of formats (including, html, pdf, docx);\ninclusion of LaTeX."
  },
  {
    "objectID": "seminar-1.html#quarto",
    "href": "seminar-1.html#quarto",
    "title": "Seminar 1",
    "section": "Quarto",
    "text": "Quarto\nI would recommend that you investigate the cool things you can do with Quarto."
  },
  {
    "objectID": "seminar-1.html#git-and-github",
    "href": "seminar-1.html#git-and-github",
    "title": "Seminar 1",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nHere’s a great youtube on Git and GitHub. Git is a tool used to manage code, designed to deal with version control. GitHub is an online repository.\nThe basic steps, I used:\n\nCreate a GitHub account.\nInstall Git on your computer. This will include an app called Git Bash. You can also check out Git Desktop. I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio.\nI typically follow the following steps laid out on this blog under the heading “Type 2: Work on your project locally then create the repository on GitHub and push it to remote.”\n\nWhen using GitHub for a solo project, these are the commands I typically execute in the RStudio terminal when I’ve completed working on a section:\n\ngit status\ngit add .\ngit commit -m \"what I did\"\ngit push origin master\n\nWhen working in a team, you want to ensure that you first “pull” any changes before editing files. This avoids clashes that can be a pain to disentangle. Before editing:\n\ngit fetch - this will fetch the data from the online repo\ngit status - this will show whether you have any local changes\n\nIf you have any changes:\n\ngit add .\ngit commit -m \"what I did\"\n\nIf you don’t have any changes:\n\ngit pull origin master\n\nAfter edits are complete, check again for changes. In my experience, using GitHub does NOT AT ALL negate the need to communicate between team members. If you want to avoid issues with merging, you need be clear about who is working on what when."
  },
  {
    "objectID": "seminar-1-grp-4.html",
    "href": "seminar-1-grp-4.html",
    "title": "Group 1: Seminar 1",
    "section": "",
    "text": "Here is the material from today’s seminar."
  },
  {
    "objectID": "seminar-1-grp-4.html#r-script",
    "href": "seminar-1-grp-4.html#r-script",
    "title": "Group 1: Seminar 1",
    "section": "R Script",
    "text": "R Script\n\n\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx &lt;- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny &lt;- sqrt(x) #This DOES create a new stored value\n\npishort &lt;- round(pi, 4)\n\nz &lt;- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv &lt;- seq(1,10)\nv\nv2 &lt;- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw &lt;- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 &lt;- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW &lt;- matrix(w) \nprint(W)\nt(W)\n\nW2 &lt;- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums &lt;- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 &lt;- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 &lt;- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed &lt;- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx&lt;-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx &lt;- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz &lt;- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck &lt;- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list &lt;- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame &lt;- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=&lt;DATA&gt;) + &lt;GEOM FUNCTION&gt;(mapping=aes(&lt;MAPPINGS&gt;))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -&gt; IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ&lt;5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv &lt;- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv &lt;- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv &lt;- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv &lt;- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats &lt;- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %&gt;% \n\ndrv_stats2 &lt;- car_frame %&gt;% \n  filter(class==\"suv\") %&gt;%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %&gt;%\n  group_by(drv) %&gt;%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "seminar-1-grp-4.html#r-markdown",
    "href": "seminar-1-grp-4.html#r-markdown",
    "title": "Group 1: Seminar 1",
    "section": "R Markdown",
    "text": "R Markdown\nLink to published published markdown: html.\n\n\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\""
  },
  {
    "objectID": "seminar-1-grp-2.html",
    "href": "seminar-1-grp-2.html",
    "title": "Group 1: Seminar 1",
    "section": "",
    "text": "Here is the material from today’s seminar."
  },
  {
    "objectID": "seminar-1-grp-2.html#r-script",
    "href": "seminar-1-grp-2.html#r-script",
    "title": "Group 1: Seminar 1",
    "section": "R Script",
    "text": "R Script\n\n\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx &lt;- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny &lt;- sqrt(x) #This DOES create a new stored value\n\npishort &lt;- round(pi, 4)\n\nz &lt;- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv &lt;- seq(1,10)\nv\nv2 &lt;- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw &lt;- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 &lt;- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW &lt;- matrix(w) \nprint(W)\nt(W)\n\nW2 &lt;- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums &lt;- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 &lt;- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 &lt;- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed &lt;- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx&lt;-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx &lt;- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz &lt;- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck &lt;- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list &lt;- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame &lt;- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=&lt;DATA&gt;) + &lt;GEOM FUNCTION&gt;(mapping=aes(&lt;MAPPINGS&gt;))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -&gt; IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ&lt;5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv &lt;- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv &lt;- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv &lt;- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv &lt;- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats &lt;- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %&gt;% \n\ndrv_stats2 &lt;- car_frame %&gt;% \n  filter(class==\"suv\") %&gt;%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %&gt;%\n  group_by(drv) %&gt;%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "seminar-1-grp-2.html#r-markdown",
    "href": "seminar-1-grp-2.html#r-markdown",
    "title": "Group 1: Seminar 1",
    "section": "R Markdown",
    "text": "R Markdown\nLink to published published markdown: html.\n\n\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EC349: Data Science for Economists",
    "section": "",
    "text": "This is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe source code for this site can be found at https://github.com/neillo88/warwick-ec349.\nMoodle remains the primary source of material for this module."
  },
  {
    "objectID": "index.html#helpful-links",
    "href": "index.html#helpful-links",
    "title": "EC349: Data Science for Economists",
    "section": "Helpful links:",
    "text": "Helpful links:\nHere are a few helpful links:\n\nRStudio Download\nMarkdown Guide\nQuarto\nTidyverse\n“R for Data Science”, 2nd Edition, by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund."
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html",
    "href": "group-material/grp-1/seminar-1.html",
    "title": "Seminar 1",
    "section": "",
    "text": "You may need to install.packages(\"rmarkdown\")."
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html#installation",
    "href": "group-material/grp-1/seminar-1.html#installation",
    "title": "Seminar 1",
    "section": "",
    "text": "You may need to install.packages(\"rmarkdown\")."
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html#basics-of-markdown",
    "href": "group-material/grp-1/seminar-1.html#basics-of-markdown",
    "title": "Seminar 1",
    "section": "Basics of markdown",
    "text": "Basics of markdown\nCheck out this link to learn more about the basics of Markdown.\nFor example, you can make lists;\n\nitem 1\nitem 2\n\nNote, be sure to add a line-break before and after the list.\nordered/numbered lists;\n\nnumber 1\nnumber 2\n\nuse LaTeX; \\[\n  Y = X\\beta + u\n\\] even, inline \\(Y = X\\beta + u\\)."
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html#adding-code",
    "href": "group-material/grp-1/seminar-1.html#adding-code",
    "title": "Seminar 1",
    "section": "Adding code",
    "text": "Adding code\nLoad tidyverse library. Check this link to learn how to hide code-blocks and compress messages/warnings.\nCreate graph\n\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nMy graph"
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html#quarto",
    "href": "group-material/grp-1/seminar-1.html#quarto",
    "title": "Seminar 1",
    "section": "Quarto",
    "text": "Quarto\nI would recommend that you investigate the cool things you can do with Quarto."
  },
  {
    "objectID": "group-material/grp-1/seminar-1.html#git-and-github",
    "href": "group-material/grp-1/seminar-1.html#git-and-github",
    "title": "Seminar 1",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nHere’s a great youtube on Git and GitHub.\nThe basic steps, I used:\n\nCreate a GitHub account.\nInstall Git on your computer. This will include an app called Git Bash. You can also check out Git Desktop. I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio.\nI typically follow the following steps laid out on this blog under the heading “Type 2: Work on your project locally then create the repository on GitHub and push it to remote.”"
  },
  {
    "objectID": "seminar-1-grp-1.html",
    "href": "seminar-1-grp-1.html",
    "title": "Group 1: Seminar 1",
    "section": "",
    "text": "Here is the material from today’s seminar."
  },
  {
    "objectID": "seminar-1-grp-1.html#r-script",
    "href": "seminar-1-grp-1.html#r-script",
    "title": "Group 1: Seminar 1",
    "section": "R Script",
    "text": "R Script\n\n\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx &lt;- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny &lt;- sqrt(x) #This DOES create a new stored value\n\npishort &lt;- round(pi, 4)\n\nz &lt;- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv &lt;- seq(1,10)\nv\nv2 &lt;- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw &lt;- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 &lt;- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW &lt;- matrix(w) \nprint(W)\nt(W)\n\nW2 &lt;- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums &lt;- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 &lt;- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 &lt;- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed &lt;- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx&lt;-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx &lt;- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz &lt;- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck &lt;- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list &lt;- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame &lt;- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=&lt;DATA&gt;) + &lt;GEOM FUNCTION&gt;(mapping=aes(&lt;MAPPINGS&gt;))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -&gt; IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ&lt;5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv &lt;- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv &lt;- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv &lt;- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv &lt;- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats &lt;- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %&gt;% \n\ndrv_stats2 &lt;- car_frame %&gt;% \n  filter(class==\"suv\") %&gt;%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %&gt;%\n  group_by(drv) %&gt;%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "seminar-1-grp-1.html#r-markdown",
    "href": "seminar-1-grp-1.html#r-markdown",
    "title": "Group 1: Seminar 1",
    "section": "R Markdown",
    "text": "R Markdown\nLink to published published markdown: html.\n\n\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\""
  },
  {
    "objectID": "seminar-1-grp-3.html",
    "href": "seminar-1-grp-3.html",
    "title": "Group 1: Seminar 1",
    "section": "",
    "text": "Here is the material from today’s seminar."
  },
  {
    "objectID": "seminar-1-grp-3.html#r-script",
    "href": "seminar-1-grp-3.html#r-script",
    "title": "Group 1: Seminar 1",
    "section": "R Script",
    "text": "R Script\n\n\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx &lt;- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny &lt;- sqrt(x) #This DOES create a new stored value\n\npishort &lt;- round(pi, 4)\n\nz &lt;- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv &lt;- seq(1,10)\nv\nv2 &lt;- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw &lt;- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 &lt;- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW &lt;- matrix(w) \nprint(W)\nt(W)\n\nW2 &lt;- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums &lt;- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 &lt;- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 &lt;- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed &lt;- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx&lt;-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx &lt;- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz &lt;- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck &lt;- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list &lt;- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame &lt;- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=&lt;DATA&gt;) + &lt;GEOM FUNCTION&gt;(mapping=aes(&lt;MAPPINGS&gt;))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -&gt; IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ&lt;5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv &lt;- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv &lt;- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv &lt;- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv &lt;- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats &lt;- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %&gt;% \n\ndrv_stats2 &lt;- car_frame %&gt;% \n  filter(class==\"suv\") %&gt;%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %&gt;%\n  group_by(drv) %&gt;%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "seminar-1-grp-3.html#r-markdown",
    "href": "seminar-1-grp-3.html#r-markdown",
    "title": "Group 1: Seminar 1",
    "section": "R Markdown",
    "text": "R Markdown\nLink to published published markdown: html.\n\n\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\""
  },
  {
    "objectID": "seminar-1-grp-5.html",
    "href": "seminar-1-grp-5.html",
    "title": "Group 1: Seminar 1",
    "section": "",
    "text": "Here is the material from today’s seminar."
  },
  {
    "objectID": "seminar-1-grp-5.html#r-script",
    "href": "seminar-1-grp-5.html#r-script",
    "title": "Group 1: Seminar 1",
    "section": "R Script",
    "text": "R Script\n\n\n# Delete everything\nrm(list = ls())\n\n################################################################################\n# R-Basics\n################################################################################\n\n## Define a single value:\n\nx &lt;- 3 + sin(pi/2)\nx\nsqrt(x) #Note, this does NOT create a new stored value\ny &lt;- sqrt(x) #This DOES create a new stored value\n\npishort &lt;- round(pi, 4)\n\nz &lt;- \"word\"\nz\n\n## Define sequences, vectors, and matrices:\n\n### Sequences\nv &lt;- seq(1,10)\nv\nv2 &lt;- 1:10\nt(v)\nt(t(v))\n\n### Combine (in vector or list)\nw &lt;- c(12,1,2,3) #i.e., winter-months\nsort(w)\nw # Main object has not changed\nmin(w)\nt(w)\nt(t(w))\n\n### Apply operation to all elements\nw2 &lt;- c(-1,0,2,3) *2\nw2\n\nw2 / 0\n\n### Matrices: appears as data, not value\nW &lt;- matrix(w) \nprint(W)\nt(W)\n\nW2 &lt;- cbind(w,w2) \nW2\nrbind(w,w2)\n\n### vectors have two properites: length and type\n\ntypeof(1:10)\ntypeof(seq(1,10))\ntypeof(v)\nlength(v)\n\n### coercion: converting from one type to another\nnums &lt;- c(\"1\", \"2\", \"3\")\ntypeof(nums)\nnums\nnums1 &lt;- as.integer(nums) #note: you can use similar functions such as as.numeric, as.character\ntypeof(nums1)\nnums1\nnums2 &lt;- as.numeric(nums)\ntypeof(nums2)\nnums2\n\n### named vectors\nnamed &lt;- c(x=1, y=2, z=4)\nnamed\n\n### specific position within a vector\nx &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nx[c(3, 2, 5)]\nx[c(-3, -4)]\n\n### proportion of non-missing values\nx&lt;-c(10, 3, NA, 5, 8, 1, NA)\nmean(!is.na(x))\n\n\n## Lists\n\nx &lt;- list(\"a\", \"b\", 1:10)\nlength(x)\ntypeof(x)\nx[[1]]\nx[[3]]\ntypeof(x[[1]])\ntypeof(x[[3]])\n\n### lists can be recursive\nz &lt;- list(list(1,2), list(3,4))\n\n### subsetting a list\ncheck &lt;- list(a=1:3, b=\"a string\", c=pi, d=list(-1,5))\n\ncheck[1:2]\n\n### [[]] removes hierarchy from a list\nanother_list &lt;- check[[4]]\nanother_list[1] \nanother_list[[1]] \n\n################################################################################\n# Packages\n################################################################################\n\n## Install packages\n#install.package(tidyverse) # designed for \"tidy\" data\n\n## Load library\nlibrary(tidyverse) # includes ggplot\n\n#Do cars with big engines use more fuel than cars with small engines?\n\n#loading mpg data frame\ncar_frame &lt;- mpg\n\n#hwy measures fuel efficiency on a highway (miles per gallon) and displ measures engine displacement (in litres)\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#ggplot alone gives us an empty graph, just indicating the dataset to be used\n\nggplot(data = car_frame)\n\n#we add layers on top, geom_point adds a layer of points\n\n#mapping is always paired with an aesthetic  \n\n#aesthetic is a visual property of plotted objects (axis, size, color, symbol)\n\n#ggplot(data=&lt;DATA&gt;) + &lt;GEOM FUNCTION&gt;(mapping=aes(&lt;MAPPINGS&gt;))\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy))\n\n#aesthetics of different points can be conditional on values of variables in the dataset\n\n#plot different classes of cars using different colors\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=class))\n\n#we can match class to size of the points, though it doesn't look pretty\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, size=class))\n\n#alpha for transparency, shape (careful, MAX 6 shapes at a time by default)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, shape=class))\n\n#note x and y are aesthetics too (related to location) \n\n#you can set aesthetics manually, let's make all points blue -&gt; IT GOES OUTSIDE AES\n\nggplot(data = car_frame) + \n  geom_point(mapping=aes(x=displ, y=hwy), color=\"blue\")\n\n#color and continuous variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=cty))\n\n#conditional aesthetic\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy, color=displ&lt;5))\n\n#facets (separate plots for different categories of data)\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_wrap(~ class, nrow=2)\n\n#facets with multiple variables\n\nggplot(data = mpg) + \n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  facet_grid(drv ~ cyl)\n\n#geoms are geometrical objects that a plot uses to represent data\n\n#all geoms take a mapping argument, but not every aesthetic works with every geom\n\n#geom smooth adds a regression line to the plot\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy))\n\n#we can very linetype by drivetrain\n#note on drivetrains: f = front-wheel drive, r = rear wheel drive, 4 = 4wd\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, linetype=drv))\n\n#for geoms where data is summarized by one object (such as a line) you can create subplots by grouping on a variable (it does not add a legend)\n\nggplot(data = car_frame) +\n  geom_smooth(mapping = aes(x=displ, y=hwy, group=drv))\n\n#we can display two geoms in the same plot\n\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n\n#global mappings vs local mappings\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_point() +\n  geom_smooth(color=\"red\")\n\n# you can use different data for each layer (also LOCAL overrides GLOBAL)\n\nggplot(data = car_frame, mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(\n    se = FALSE\n  ) +\n  geom_smooth(\n    data = filter(car_frame, class == \"subcompact\"),\n    color=\"red\",\n    se = FALSE\n  )\n\n#Basic bar graph\n\nggplot(data = car_frame) +\n  geom_bar(mapping = aes(x=drv))\n\n\n## Load library\nlibrary(dplyr) \n# https://dplyr.tidyverse.org/\n# comes installed in tidyverse\n# otherwise install.package(dplyr) \n\n### Main functions: mutate, select, filter, summarize, arrange\n\n### Filter\nsuv &lt;- filter(car_frame,class==\"suv\")\n\n### Select - specific variables\nsuv &lt;- select(suv,hwy,cty,displ,drv)\n\n### Mutate - transform/add existing variables\nsuv &lt;- mutate(suv,ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ)\n\n  # see also, transmute() to keep only new variables\n\nsummarize(suv, avg_cty=mean(cty, na.rm = TRUE))\n\nsuv_bydrv &lt;- group_by(suv, drv)\n\nsummarize(suv_bydrv, cat_m=mean(cty_d, na.rm = TRUE))\n\ndrv_stats &lt;- summarize(suv_bydrv, \n                       count=n(),\n                       cty_d=mean(cty_d, na.rm = TRUE),\n                       hwy_d=mean(hwy_d, na.rm = TRUE)\n                       ) \n\nggplot(data=drv_stats, mapping=aes(x=cty_d, y=hwy_d)) +\n  geom_point(aes(size=count)) \n\n\n\n#it is more efficient to perform the same using pipe %&gt;% \n\ndrv_stats2 &lt;- car_frame %&gt;% \n  filter(class==\"suv\") %&gt;%\n  mutate(ratio = cty/hwy,hwy_d = hwy/displ,cty_d = cty/displ) %&gt;%\n  group_by(drv) %&gt;%\n  summarize( \n            count=n(),\n            cty_d=mean(cty_d, na.rm = TRUE),\n            hwy_d=mean(hwy_d, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "seminar-1-grp-5.html#r-markdown",
    "href": "seminar-1-grp-5.html#r-markdown",
    "title": "Group 1: Seminar 1",
    "section": "R Markdown",
    "text": "R Markdown\nLink to published published markdown: html.\n\n\n---\ntitle: \"Seminar 1\"\nauthor: Neil Lloyd\ndate: 20 January 2025\noutput: html_document\n---\n\n## Installation\n\nYou may need to `install.packages(\"rmarkdown\")`. \n\n## Basics of markdown\n\nCheck out this link to learn more about the basics of [Markdown](https://www.markdownguide.org/basic-syntax/). \n\nFor example, you can make lists;\n\n- item 1\n- item 2\n\n*Note, be sure to add a line-break before and after the list.*\n\nordered/numbered lists; \n\n1. number 1\n2. number 2\n\nuse LaTeX;\n$$\n  Y = X\\beta + u\n$$\neven, inline $Y = X\\beta + u$.\n\n\n## Adding code\n\nLoad `tidyverse` library. Check this [link](https://rmarkdown.rstudio.com/lesson-3.html) to learn how to hide code-blocks and compress messages/warnings.\n\n```{r,include=FALSE}\nlibrary(tidyverse)\n```\n\nCreate graph \n```{r, fig.cap = \"My graph\"}\ncar_frame &lt;- mpg\nggplot(data = car_frame) +\n  geom_point(mapping=aes(x=displ, y=hwy)) +\n  geom_smooth(mapping=aes(x=displ, y=hwy))\n```\n\n## Quarto\n\nI would recommend that you investigate the cool things you can do with [Quarto](https://quarto.org/). \n\n## Git and GitHub\n\nHere's a great [youtube](https://www.youtube.com/watch?v=RGOj5yH7evk) on Git and GitHub.\n\nThe basic steps, *I used*:\n\n1. Create a [GitHub](https://github.com/) account. \n2. Install [Git](https://git-scm.com/downloads) on your computer. This will include an app called Git Bash. You can also check out [Git Desktop](https://desktop.github.com/download/). I have found it easier to follow the steps below, which can be executed from Git Bash or the terminal within RStudio. \n3. I typically follow the following steps laid out on this [blog](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/) under the heading \"*Type 2: Work on your project locally then create the repository on GitHub and push it to remote.*\""
  }
]